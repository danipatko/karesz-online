// Concept: easily readable and parseable instructions that can be generated by various programming languages
// One instruction consist of a command (key) and a value of an integer or an enum
interface instruction {
    command:string,
    value:number
}

interface point {
    x: number,
    y: number
}

interface stats {
    numSteps:number,
    numTurns:number,
    numWallchecks:number,
    numCrashes:number,
    numPickups:number,
    numColor:number
}

// Basic turning directions
enum directions {
    right = 90,
    left = -90
};

enum rotation {
    up = 0,
    right = 90,
    down = 180,
    left = 270
}

class karesz {
    // Default parameters
    position:point;
    rotation:rotation;
    stats:stats;

    // Initialization: starting position and rotation
    constructor(startPosition:point={x:0, y:0}, startRotation:rotation=rotation.up){
        this.position = startPosition;
        this.rotation = startRotation;
        this.stats = { numColor:0, numCrashes:0, numPickups:0, numSteps:0, numTurns:0, numWallchecks:0 };
    }

    ///
    ///     BASE FUNCTIONS
    ///

    step = () => {

    }

    turn = (direction:directions) => {
        this.rotation += direction;
    }
}

// karesz map
class kmap {

}

const render = (map:kmap, players:Array<karesz>) => {

}

// Called on run - execute array of instructions
export const run = (instructions:Array<instruction>):any => {
    
    console.log('asd');
    
    return undefined;
};

